---
import Layout from "../layouts/layout.astro"
import data from "../data/data.json"

let gift_card_money_total: number = 0;

data.gift_cards.forEach((card) => {
    card.type == "Amazon" ? gift_card_money_total += card.amount : null;
})

data.purchases.forEach((purchase) => {
    gift_card_money_total -= purchase.gift_card_amount;
})

let income_total: number = 0;

data.income.forEach((income) => {
    income_total += income.amount;
})

data.purchases.forEach((purchase) => {
    income_total -= purchase.income_amount;
})

function daysPassed(startDateString: string): number {
    const startDate = new Date(startDateString);
    const currentDate = new Date();
    const timeDifference = currentDate.getTime() - startDate.getTime();
    return Math.floor(timeDifference / (1000 * 60 * 60 * 24));
}

// TODO: go through purchases in reverse, on the first purchase that is less than 15, return true or false as to weather it was more than 7 days ago
function isPurchaseTooRecent(group_cost: number, days: number, greater_than = false) {
    let return_value = false
    let daysTooMany = 100000
    if (greater_than == false) {
        data.purchases.slice().reverse().forEach((purchase) => {
            if (purchase.gift_card_amount + purchase.income_amount < group_cost && daysPassed(purchase.date) <= days) {
                return_value = true
                if (daysTooMany > days - daysPassed(purchase.date)) {
                    daysTooMany = days - daysPassed(purchase.date)
                }
            }
        })
    }
    if (greater_than == true) {
        data.purchases.slice().reverse().forEach((purchase) => {
            if (purchase.gift_card_amount + purchase.income_amount > group_cost && daysPassed(purchase.date) <= days) {
                return_value = true
                if (daysTooMany < days - daysPassed(purchase.date)) {
                    daysTooMany = days - daysPassed(purchase.date)
                }
            }
        })
    }
    return [return_value, daysTooMany]
}

let less_than_15_max: number = !isPurchaseTooRecent(15, 7)[0] ? (gift_card_money_total + income_total) * .3 : 0
let less_than_15_max_days_too_many = isPurchaseTooRecent(15, 7)[1]
let less_than_40_max: number = !isPurchaseTooRecent(40, 21)[0] ? (gift_card_money_total + income_total) * .4 : 0
let less_than_40_max_days_too_many = isPurchaseTooRecent(40, 21)[1]
let less_than_120_max: number = !isPurchaseTooRecent(120, 42)[0] ? (gift_card_money_total + income_total) * .55 : 0
let less_than_120_max_days_too_many = isPurchaseTooRecent(120, 42)[1]
let more_than_120_max: number = !isPurchaseTooRecent(120, 84, true)[0] ? (gift_card_money_total + income_total) * .625 : 0
let more_than_120_max_days_too_many = !isPurchaseTooRecent(120, 84, true)[1]

function moneyEarnedInLast(days: number) {
    let return_value = 0
    data.income.forEach((income) => {
        if (daysPassed(income.date) <= days) {
            return_value += income.amount;
        }
    })
    return return_value
}

function moneySpentInLast(days: number) {
    let return_value = 0
    data.purchases.forEach((purchase) => {
        if (daysPassed(purchase.date) <= days) {
            return_value += purchase.income_amount + purchase.gift_card_amount;
        }
    })
    return return_value
}

let money_earned_in_week: number = moneyEarnedInLast(7)
let money_earned_in_month: number = moneyEarnedInLast(28)
let money_spent_in_week: number = moneySpentInLast(7)
let money_spent_in_month: number = moneySpentInLast(28)

let daysLeft: number = daysPassed(data.goal_settings.date) * -1;
let amountLeft: number = data.goal_settings.price - (income_total + gift_card_money_total);
let dailyChoreAmount: number = (data.goal_settings.price - (income_total + gift_card_money_total)) / daysPassed(data.goal_settings.date) * -1;

if (data.goal_settings.price <= 15) {
    dailyChoreAmount /= .3;
} else if (data.goal_settings.price <= 40) {
    dailyChoreAmount /= .4;
} else if (data.goal_settings.price <= 120) {
    dailyChoreAmount /= .55;
} else if (data.goal_settings.price >= 120) {
    dailyChoreAmount /= .625;
}

let weeklyChoreAmount: number = dailyChoreAmount * 7;
let dailyChoreTime: number = Math.ceil((dailyChoreAmount / 8) * 8) / 8 * 60;
let weeklyChoreTime: number = dailyChoreTime * 7;
---

<Layout title={false}>
    <div class="info-container">
        <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">Gift card total:
        ${gift_card_money_total}</p>
        <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">Income total: ${income_total}</p>
        <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">Less than $15 purchase max:
            ${less_than_15_max}</p>
        <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">Less than $15 purchase max days
            left: {less_than_15_max_days_too_many.toString().replace("100000", "0")} days</p>
        <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">Less than $40 purchase max:
            ${less_than_40_max}</p>
        <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">Less than $40 purchase max days
            left: {less_than_40_max_days_too_many.toString().replace("100000", "0")} days</p>
        <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">Less than $120 purchase max:
            ${less_than_120_max}</p>
        <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">Less than 120 purchase max days
            left: {less_than_120_max_days_too_many.toString().replace("100000", "0")} days</p>
        <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">More than $120 purchase max:
            ${more_than_120_max}</p>
        <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">Money earned in last week:
            ${money_earned_in_week}</p>
        <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">Money earned in last month:
            ${money_earned_in_month}</p>
        <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">Money spent in last week:
            ${money_spent_in_week}</p>
        <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">Money spent in last month:
            ${money_spent_in_month}</p>
        <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">Goal finish
            date: {data.goal_settings.date}</p>
        <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">Goal price:
            ${data.goal_settings.price}</p>
        <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">Days left for
            goal: {daysLeft}</p>
        <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">Amount left for goal:
            ${amountLeft.toFixed(2)}</p>
        <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">Daily chore amount:
            ${dailyChoreAmount.toFixed(2)}</p>
        <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">Weekly chore amount:
            ${weeklyChoreAmount.toFixed(2)}</p>
        <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">Daily chore
            time: {dailyChoreTime} minutes</p>
        <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">Weekly chore
            time: {weeklyChoreTime} minutes</p>
    </div>
    <style>
        .info-container {
            height: 25vh;
            display: grid;
            grid-template-columns: repeat(4, 1fr);
        }

        .info-container > p {
            margin: 0;
            text-align: center;
        }
    </style>
</Layout>