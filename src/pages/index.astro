---
import Layout from "../layouts/layout.astro"
import data from "./data.json"

let gift_card_money_total: number = 0;

data.gift_cards.forEach((card) => {
    card.type == "Amazon" ? gift_card_money_total += card.amount : null;
})

data.purchases.forEach((purchase) => {
    gift_card_money_total -= purchase.gift_card_amount;
})

let income_total: number = 0;

data.income.forEach((income) => {
    income_total += income.amount;
})

data.purchases.forEach((purchase) => {
    income_total -= purchase.income_amount;
})

function daysPassed(startDateString: string): number {
    const startDate = new Date(startDateString);
    const currentDate = new Date();
    const timeDifference = currentDate.getTime() - startDate.getTime();
    return Math.floor(timeDifference / (1000 * 60 * 60 * 24));
}

// TODO: go through purchases in reverse, on the first purchase that is less than 15, return true or false as to weather it was more than 7 days ago
function isPurchaseTooRecent(group_cost: number ,greater_than = false) {
    let return_value = false
    if (greater_than == false) {
        data.purchases.slice().reverse().forEach((purchase) => {
            if (purchase.gift_card_amount + purchase.income_amount > group_cost && daysPassed(purchase.date) <= 7) {
                return_value = true
            }
        })
    }
    if (greater_than == true) {
        data.purchases.slice().reverse().forEach((purchase) => {
            if (purchase.gift_card_amount + purchase.income_amount < group_cost && daysPassed(purchase.date) <= 7) {
                return_value = true
            }
        })
    }
    return return_value
}

let less_than_15_max: number = !isPurchaseTooRecent(15) ? (gift_card_money_total + income_total) * .3 : 0
let less_than_40_max: number = !isPurchaseTooRecent(40) ? (gift_card_money_total + income_total) * .4 : 0
let less_than_120_max: number = !isPurchaseTooRecent(120) ? (gift_card_money_total + income_total) * .55 : 0
let more_than_120_max: number = !isPurchaseTooRecent(15, true) ? (gift_card_money_total + income_total) * .625 : 0

function moneyEarnedInLast(days: number) {
    let return_value = 0
    data.income.forEach((income) => {
        return_value += income.amount;
    })
    return return_value
}

function moneySpentInLast(days: number) {
    let return_value = 0
    data.purchases.forEach((purchase) => {
        return_value += purchase.income_amount + purchase.gift_card_amount;
    })
    return return_value
}

let money_earned_in_week: number = moneyEarnedInLast(7)
let money_earned_in_month: number = moneyEarnedInLast(28)
let money_spent_in_week: number = moneySpentInLast(7)
let money_spent_in_month: number = moneySpentInLast(28)
---

<Layout title={false}>
    <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">Gift card total: ${gift_card_money_total}</p>
    <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">Income total: ${income_total}</p>
    <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">Less than $15 purchase max: ${less_than_15_max}</p>
    <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">Less than $40 purchase max: ${less_than_40_max}</p>
    <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">Less than $120 purchase max: ${less_than_120_max}</p>
    <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">More than $120 purchase max: ${more_than_120_max}</p>
    <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">Money earned in last week: ${money_earned_in_week}</p>
    <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">Money earned in last month: ${money_earned_in_month}</p>
    <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">Money spent in last week: ${money_spent_in_week}</p>
    <p class="md-typescale-body-medium" style="color: var(--md-color-on-surface);">Money spent in last month: ${money_spent_in_month}</p>
</Layout>